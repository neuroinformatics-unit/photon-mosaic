# Base paths
raw_data_base = "/ceph/margrie/laura/raw_data/simon/3photon_rotation/shared/"
processed_data_base = "/ceph/margrie/laura/cimaut/derivatives"

# Dynamically discover folders matching the "2*" pattern
datasets = glob_wildcards(f"{raw_data_base}{{dataset}}").dataset
datasets = [ds for ds in datasets if ds.startswith("2")]
datasets = [ds.split("/")[0] for ds in datasets]
datasets = list(set(datasets))
datasets.sort()

#  for the output
datasets_no_underscore = [ds.replace("_", "") for ds in datasets]

valid_indices = list(range(len(datasets)))
#  remove: 19, 17, 15, 5
valid_indices.remove(19)
valid_indices.remove(17)
valid_indices.remove(15)
valid_indices.remove(5)

subsample_datasets = [datasets_no_underscore[i] for i in valid_indices]

#  -----------------------------------------------------
#  Final state of the pipeline
#  Are all the outputs files present?
rule all:
    input:
        expand(
            [
                # f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation/derotated_full.tif",
                # f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation/derotated_full.csv",
                # f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation_metrics.csv",
                # f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/error.txt",
                # f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/plane0/stat.npy",
                f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/traces/dff_example_100.png",
            ],
            zip,
            # index=range(len(datasets)),
            # datasets_no_underscore=datasets_no_underscore,
            index=valid_indices,
            datasets_no_underscore=subsample_datasets,
        ),
        # f"{processed_data_base}/stability_metric.png",

#  -----------------------------------------------------
#  Preprocess
rule preprocess:
    input:
        raw=lambda wildcards: f"{raw_data_base}{datasets[int(wildcards.index)]}/",
    output:
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation_metrics.csv",
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/error.txt",
        tiff=f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation/derotated_full.tif",
        csv=f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation/derotated_full.csv",
    params:
        index=lambda wildcards: wildcards.index
    resources:
        partition="fast",
        mem_mb=32000,
        cpu_per_task=1,
        tasks=1,
        nodes=1,
    script:
        "../calcium_imaging_automation/core/rules/preprocess.py"

# -----------------------------------------------------
# Suite2p
rule suite2p:
    input:
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/derotation/derotated_full.tif",
        f"/ceph/margrie/laura/cimaut/3p_non_rigid_ops.npy",
    output:
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/plane0/stat.npy",
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/suite2p/plane0/data.bin",
    params:
        index=lambda wildcards: wildcards.index
    resources:
        partition="fast",
        mem_mb=16000,
        cpu_per_task=1,
        tasks=1,
        nodes=1,
    script:
        "../calcium_imaging_automation/core/rules/suite2p_run.py"

# -----------------------------------------------------
# Collect suite2p data and make plots
rule postprocess:
    output:
        # f"{processed_data_base}/stability_metric.png",
        "workflow/results/data/stability_metric.png",
    params:
        datasets=datasets_no_underscore,
        base_path=processed_data_base
    resources:
        partition="fast",
        mem_mb=8000,
        cpu_per_task=1,
        tasks=1,
        nodes=1,
    script:
        "../calcium_imaging_automation/core/rules/postprocess.py"

rule plot_traces:
    input:
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/funcimg/plane0/F.npy"
    output:
        f"{processed_data_base}/sub-{{index}}_{{datasets_no_underscore}}/ses-0/traces/dff_example_100.png",
    params:
        index=lambda wildcards: wildcards.index
    resources:
        partition="fast",
        mem_mb=16000,
        cpu_per_task=1,
        tasks=1,
        nodes=1,
    script:
        "../calcium_imaging_automation/core/rules/plot_data.py"

#  -----------------------------------------------------
#  Summarize data for datavzrd report
rule summarize_data:
    input:
        expand(
            [
                f"{processed_data_base}/sub-{{index}}_{{dataset}}/ses-0/funcimg/metric.txt",
                f"{processed_data_base}/sub-{{index}}_{{dataset}}/ses-0/funcimg/error.txt",
            ],
            zip,
            index=range(len(datasets)),
            dataset=datasets_no_underscore,
        )
    output:
        "workflow/results/data/summary.csv"
    params:
        datasets=datasets_no_underscore,
        base_path=processed_data_base
    script:
        "../calcium_imaging_automation/core/rules/summarize_data.py"
